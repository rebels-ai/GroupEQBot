from dataclasses import dataclass, field
from datetime import datetime

from elasticsearch_dsl import Document, InnerDoc, Date, Keyword, Text, Object, Long

from interfaces.models.internal_event.event import ExpectedInternalEvent
from utilities.internal_logger.logger import logger
from utilities.configurations_constructor.constructor import Constructor
CONFIGURATIONS = Constructor().configurations

'''
Description:
    Multiple Indeces for storing events for particular group chat

GroupEvents
    [
        eventID:  (eventID generated by Database)
            {
                userID: int
                message_id: int  (MessageID from telegram, None if MemberUpdate)
                eventTime: timestamp
                eventType: str (MemberEvent; MessageEvent (Audio ...))
                content: str | None 
                        (none because currently we support just text messages. if not text message, refere to contentMetadata)
                contentMetadata:
                    {
                        ...
                    }
                raw: ExpectedInternalEvent (for any sort of additional anaylysis)
            }
    ]
'''


class ContentMetadata(InnerDoc):
    content_properties = Object()

class GroupEvent(InnerDoc):
    user_id = Long(fields={'keyword': Keyword()}, required=True)
    message_id = Text(fields={'keyword': Keyword()})
    event_time = Date()
    event_type = Text(fields={"keyword": Keyword()}, required=True)
    content = Text(fields={"keyword": Keyword()})
    content_metadata = ContentMetadata()
    raw_event = Object()

@dataclass
class GroupEventsSchema(InnerDoc):

    internal_event: ExpectedInternalEvent
    index_name: str = field(init=False)

    update_id = Text(fields={'keyword': Keyword()})
    group_event = Object(GroupEvent, required=True)

    def generate_schema(self):
        """
        Function, which generates GroupEventsSchema data model
        based on GroupEvent, ContentMetadata schemas.

        Notes:
            The final data model used for Elasticsearch-dsl interface.
        """

        try:
            self.update_id = 123
            self.group_event = self.generate_group_event_model()
        except Exception as error:
            logger.warning('Failed GroupEventsSchema model generation.')
            raise error

    def generate_group_event_model(self):
        """
        Function, which generates GroupEventsSchema data model
        based on GroupEvent, ContentMetadata schemas.

        Notes:
            The final data model used for Elasticsearch-dsl interface.
        """

        try:
            data_model = GroupEvent(
                user_id = self.internal_event.user_id,
                message_id = self.internal_event.message_id,
                event_time = self.internal_event.event_time,
                event_type = self.internal_event.event_type,
                content = self.internal_event.message,
                content_metadata = self.generate_content_metadata_model(),
                raw_event = self.internal_event.dict()
                )
        except Exception as error:
            logger.warning('Failed GroupEventsSchema model generation.')
            raise error

        return data_model

    def generate_content_metadata_model(self) -> ContentMetadata:
        """
        Function, which generates ContentMetadata data model
        based on ContentMetadata schema.
        """

        try:
            data_model = ContentMetadata(content_properties=self.internal_event.event.message.entities)
        except Exception as error:
            logger.warning('Failed ContentMetadata model generation.')
            raise error

        return data_model
    
    def align_event_type_for_raw_event(self):
        """
        Function, which aligns ExpectedInternalEvent data model event_type field.

        Notes:
            The model with aligned event_type field,
            because Elasticsearch does not accept custom types.
        """
        self.internal_event.event_type = self.internal_event.event_type.value

    def align_chat_type_for_raw_event(self):
        """ Function, which aligns ExpectedInternalEvent data model chat_type field.

        Notes:
            The model with aligned chat_type field,
            because Elasticsearch does not accept custom types.
        """
        self.internal_event.chat_type = self.internal_event.chat_type.value

    def align_new_member_status_for_raw_event(self):
        """ Function, which aligns ExpectedInternalEvent data model new_member_status field.

        Notes:
            The model with aligned chat_type field,
            because Elasticsearch does not accept custom types.
        """
        self.internal_event.new_status = self.internal_event.new_status.value if self.internal_event.new_status is not None else None

    def align_old_member_status_for_raw_event(self):
        """ Function, which aligns ExpectedInternalEvent data model new_member_status field.

        Notes:
            The model with aligned chat_type field,
            because Elasticsearch does not accept custom types.
        """
        self.internal_event.old_status = self.internal_event.old_status.value if self.internal_event.old_status is not None else None

    def __post_init__(self):
        self.align_event_type_for_raw_event()
        self.align_chat_type_for_raw_event()
        self.align_new_member_status_for_raw_event()
        self.align_old_member_status_for_raw_event()

        self.generate_schema()
        self.index_name = f'{abs(self.internal_event.chat_id)}'
